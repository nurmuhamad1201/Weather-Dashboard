document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('weather-form');
  const input = document.getElementById('city');
  const result = document.getElementById('weather-result');
  const submitBtn = form.querySelector('button[type="submit"]');

  const modal = document.getElementById('modal');
  const yesBtn = document.getElementById('yes-location');
  const noBtn = document.getElementById('no-location');

  // Store original button text
  const originalButtonText = submitBtn.textContent;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const city = input.value.trim();
    if (!city) return;
    
    // Basic validation
    if (!/^[a-zA-Z–∞-—è–ê-–Ø\s\-]+$/.test(city)) {
      showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
      return;
    }
    
    await getWeather(city);
  });

  // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
  modal.style.display = 'flex';

  yesBtn.addEventListener('click', async () => {
    modal.style.display = 'none';
    await getLocationByIP();
  });

  noBtn.addEventListener('click', () => {
    modal.style.display = 'none';
  });

  function fixUrl(url) {
    if (!url) return '';
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return url;
    }
    return `https:${url}`;
  }

  async function getLocationByIP() {
    setLoadingState(true, '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');
    try {
      const res = await fetchWithTimeout('https://ipapi.co/json/', 5000);
      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
      
      const data = await res.json();
      const city = data?.city || '';
      
      if (city) {
        input.value = city;
        await getWeather(city);
      } else {
        showError('–ì–æ—Ä–æ–¥ –ø–æ IP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
      }
    } catch (err) {
      console.error('Location error:', err);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è');
    } finally {
      setLoadingState(false);
    }
  }

  async function getWeather(city, retryCount = 0) {
    setLoadingState(true, '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã...');

    try {
      const res = await fetchWithTimeout(`https://wttr.in/${encodeURIComponent(city)}?format=j1`, 10000);
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }

      const data = await res.json();

      // Validate response structure
      if (!data || !data.current_condition || !data.weather) {
        throw new Error('Invalid weather data received');
      }

      displayWeather(data, city);
      
    } catch (error) {
      console.error('Weather fetch error:', error);
      
      // Retry logic (max 2 retries)
      if (retryCount < 2 && (error.name === 'TypeError' || error.message.includes('Failed to fetch'))) {
        console.log(`Retrying... attempt ${retryCount + 1}`);
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
        return getWeather(city, retryCount + 1);
      }

      if (error.name === 'TimeoutError') {
        showError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
        showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
      } else if (error.message.includes('Invalid weather data')) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.');
      } else {
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã üòì');
      }
    } finally {
      setLoadingState(false);
    }
  }

  function displayWeather(data, requestedCity) {
    try {
      const area = data?.nearest_area?.[0]?.areaName?.[0]?.value || requestedCity;
      const region = data?.nearest_area?.[0]?.region?.[0]?.value || '';
      const country = data?.nearest_area?.[0]?.country?.[0]?.value || '';
      const current = data?.current_condition?.[0];
      const days = data?.weather;

      if (!current) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        return;
      }

      // Safe icon URL access
      const currentIcon = current.weatherIconUrl?.[0]?.value;
      const currentIconUrl = currentIcon ? fixUrl(currentIcon) : '';

      result.innerHTML = `
        <h2>${area}${region ? ', ' + region : ''}${country ? ', ' + country : ''}</h2>
        <div class="current">
          ${currentIconUrl ? `<img src="${currentIconUrl}" alt="icon" onerror="this.style.display='none'">` : ''}
          <div>
            <p>${current.weatherDesc?.[0]?.value || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
            <p>üå° ${current.temp_C}¬∞C</p>
            <p>üíß ${current.humidity}%</p>
            <p>üí® ${current.windspeedKmph} –∫–º/—á</p>
          </div>
        </div>
        <h3>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è</h3>
        <div class="forecast">
          ${days.slice(0, 3).map(day => {
            const hourly = day.hourly?.[4] || day.hourly?.[0] || {};
            const dayIcon = hourly.weatherIconUrl?.[0]?.value;
            const dayIconUrl = dayIcon ? fixUrl(dayIcon) : '';
            
            return `
              <div class="forecast-day">
                <p><strong>${day.date}</strong></p>
                ${dayIconUrl ? `<img src="${dayIconUrl}" alt="icon" onerror="this.style.display='none'">` : ''}
                <p>${hourly.weatherDesc?.[0]?.value || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
                <p>üå° –ú–∞–∫—Å: ${day.maxtempC}¬∞C</p>
                <p>üå° –ú–∏–Ω: ${day.mintempC}¬∞C</p>
              </div>
            `;
          }).join('')}
        </div>
      `;
      
      result.classList.remove('hidden');
    } catch (error) {
      console.error('Display error:', error);
      showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
    }
  }

  // Utility functions
  async function fetchWithTimeout(url, timeout = 10000) {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

    try {
      const response = await fetch(url, {
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      return response;
    } catch (error) {
      clearTimeout(timeoutId);
      if (error.name === 'AbortError') {
        error.name = 'TimeoutError';
      }
      throw error;
    }
  }

  function setLoadingState(isLoading, message = '') {
    if (isLoading) {
      submitBtn.disabled = true;
      submitBtn.textContent = message || '–ó–∞–≥—Ä—É–∑–∫–∞...';
      result.innerHTML = `<div class="loading">${message || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</div>`;
      result.classList.remove('hidden');
    } else {
      submitBtn.disabled = false;
      submitBtn.textContent = originalButtonText;
    }
  }

  function showError(message) {
    result.innerHTML = `
      <div class="error">
        <p>${message}</p>
      </div>
    `;
    result.classList.remove('hidden');
  }
});